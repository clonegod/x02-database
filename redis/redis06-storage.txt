redis持久化机制
	redis虽然是一个内存数据库，但它也支持数据持久化。也就是说，redis需要经常将内存中的同步到磁盘来保证数据的持久化。
	redis提供两种持久化机制：rdb, aof，两者选择一种即可，推荐使用aof.
		
【rdb - snapshotting（快照）】 - 默认方式
将内存以快照的方式写入到二进制文件中，默认为dump.rdb，可以通过配置设置自动进行快照存储。
我们可以配置redis在n秒内如果超过m个key发生修改，就自动进行快照存储。
	save 900 1		#900秒内，如果有超过1个key发生修改，则进行快照存储
	save 300 10		#300秒内，如果有超过10个key发生修改，则进行快照存储
	save 60 10000	#60秒内，如果有超过10000个key发生修改，则进行快照存储


【aof - append only file】 
由于快照方式是在一定时间间隔后才做一次，所以在redis意外宕机的情况下，将丢失最后一次快照后发生修改的那些数据。
aof相对rdb方式，可提供更好的持久化保证，尽可能少的丢失数据。
使用aof时，redis会将每一个收到的写命令通过write函数追加到命令文件中保存，当redis重启时会重新执行文件中保存的写命令来重建整个数据库的内容。
这个文件默认保存在dir所指定的目录下，文件名为 appendonly.aof。

需要注意的是，命令不是立即写入磁盘的，命令会先放入系统写缓冲区，然后由操作系统定期刷到磁盘，刷盘策略可通过配置进行调整。
	
aof相关配置：
	appendonly yes 					# 启动aof持久化方案保存命令
	appendfilename "appendonly.aof"	# aof命令保存文件名，保存到 dir 所指定的工作目录下。
	
	appendfsync always				# 收到写命令就立即写入到磁盘。效率最低，但保证了最安全的数据持久化。
	#appendfsync everysec			# 每秒钟写入磁盘，在性能和持久化方面做了很好的折中。
	#appendfsync no					# 完全依赖os进行数据的刷盘，性能最好，持久化没保证。
	
	
生产环境配置建议：
1、从数据安全性方面考虑：
	aof比rdb更安全，因此生产环境推荐使用aof + appendfsync always 来确保数据的最高安全性。
2、从性能方面考虑：
	aof在高并发写的场景下，仍然会严重拉低redis的性能，因此，可结合其它技术来解决写效率的问题，比如使用ssdb来解决高并发写的问题。
	在redis3.x推出集群方案后，可通过集群方案来解决高并发写性能的问题（写被分摊到集群不同的节点上，因此提高了写的效率）。
	