redis 5种数据类型：string, list, set, zset, hash

------------------------------------------------------
【string类型 - 常用来做简单key-value存储】
	包含多种类型的特殊类型，并且是二进制安全的。
	比如，存储序列化对象的存储，图片的二进制存储，简单的字符串，数值等。
	
set 和 get
	设置值 set name alice
	取值 	get name
	删除	del name

使用setnx (not exist)
	name 如果不存在，则进行设置，存在就不设置（返回0表示设置失败）

使用setex (expire)
	setex name 10 alice 设置name的有效期为10秒，10秒后查询返回nil
	
使用setrange 替换字符串
	set email 123@qq.com
	setrange 4 xx (从指定偏移量开始，用给定的字符串替换后面的部分/全部字符串)

批量设置与获取
	mset key1 v1 key2 v2 key3 v3
	mget key1 key2 key3
	
设置新值并返回旧值
	set key oldvalue
	getset key newvalue

追加字符串
	append key 
	
获取字符串长度
	strlen key

数值加减
	incr	incrby

数值按步长加减
	decr	decrby
	
------------------------------------------------------
【hash类型 - 常用来做对象属性的存储】
	基于key的扩展类型，按字段进行值的映射： key : field -> value [filed value]
	非常适合存储对象，将对象的数据存储到Hash类型里面比存储在String类型里占用更少的内存空间，并方便存储整个对象。
	使用hash结果存储对象，
		第1种方式（每个字段存储到一个field中，适合字段比较少的情况）：
			key 	field 		value
			user:1	name		alice		
			user:1	age			20		
			user:1	sex			female		
			user:2	name		bob		
			user:2	age			22	
			user:2	sex			male		
		第2种方式（将字段聚合为一个json字符串，适合字段多的情况）：
			key 	field 		value
			users	id:1		{name:alice, age:20, sex:female, phone:123, address:北京}
			users	id:2		{name:bob, age:20, sex:male, phone:123, address:北京}
	
设置单个field
	hset key field value
	hsetnx key field value
获取单个field
	hget key field
	
批量设置field
	hmset key field value [field value ...]
批量获取field
	hmget key field [field ...]

判断key关联的某个field是否存在
	hexists key field

删除1个或多个field
	hdel key field [field ...]
	del key # 删除key以及对应的所有field

获取所有field的个数
	hlen key

获取所有field的name
	hkeys key
	
获取所有field的value
	hvals key

获取所有的field的name和value
	hgetall key
	
对数值类field的value进行加减（正数加，负数减）
	hincrby key field increment
	

------------------------------------------------------
【list类型 - 常用做简单队列使用】
	list类型是一个链表结构的集合，其功能主要有push，pop。
	更详细的说，list类型是一个双端链表，可以在集合的头部或尾部添加或删除元素。
	类似Java中的Deque队列，可在队列头部或尾部进行元素的添加/获取。
	list的设计非常精巧，既可以做栈(FILO)，又可以做队列(FIFO)。

队头添加元素：lpush
队尾添加元素：rpush

队头删除元素： lpop
队尾删除元素： rpop
	
栈(FILO): lpush + lpop
	lpush q1 one
	lpush q1 two
	lpop q1 -> two
	lpop q1 -> one

队列(FIFO)；rpush + lpop
	生产者：
		rpush q1 one
		rpush q1 two
	消费者：
		lpop q1 -> one
		lpop q1 -> two
	
获取指定区间的元素(-1 表示末尾)：lrange key start stop
	rpush q1 "one" "two" "three"
	lrange q1 0 -1 
		-> "one" "two" "three"

截取队列(可实现保留队列中最新N个元素)： ltrim key start stop
	rpush q1 1 2 3 4 5 6
	ltrim q1 0 2
	lrange q1 0 -1
		-> 1 2 3

在指定元素的前/后插入新元素：linsert key BEFORE|AFTER pivot value
	linsert q1 after "one" "four"
	lrange q1 0 -1 
		-> "one" "four" "two" "three"

替换指定下标的元素：lset key index value

从队头开始删除n个指定的元素：lrem key count value

获取队列的长度；llen key	

获取指定索引位的元素：lindex key index

队尾删除，队头添加：rpoplpush source destination
	rpush q1 1 2 3
	rpoplpush q1 q1 # src与dest可以是同一个队列
	lrange q1 0 -1
		-> 3 1 2 # 队尾元素移动到队头去了（效果：循环使用一个队列中的元素）
		

------------------------------------------------------
【set类型 - 常用来做交并差集】
	无序且不重复的集合

添加元素：sadd key member [member ...]

删除元素：spop key [count]

元素个数：scard key

是否包含：sismember key member

返回所有元素： smembers key

交集：sinter key [key ...]

并集：sunion key [key ...]

差集：sdiff key [key ...]

差集存储到指定集合中：sdiffstore destination key [key ...]


------------------------------------------------------
【zset类型 - 常用来基于rank排行的查询】
	基于分值排序的set
	- 基于索引区间查询（rank1...rank2）
	- 基于分值区间查询（score1...score2）
	
添加元素：zadd key [NX|XX] [CH] [INCR] score member [score member ...]
	zadd users 100 alice
	zadd users 80 bob 90 cindy 85 dug
	
修改分值：
	zincrby key increment member

查询总元素个数：zcard key

查询指定成员的分数；zscore key member

查询指定分值范围内的元素个数；zcount key min max

查询所有元素；
	zrange users 0 -1 withscores
	zrevrange users 0 -1 withscores

基于索引位/rank的查询：
	按排序后的元素索引位获取元素	
		zrange key start stop [WITHSCORES]
		zrevrange key start stop [WITHSCORES]
	# 取排行最后的2个成员
	zrange users 0 1 withscores
	# 取排行最前的2个成员
	zrevrange users 0 1 withscores

基于分值区间的查询：
	按分值倒序排列，从偏移量开始，取N个元素: 
		zrangebyscore key min max [WITHSCORES] [LIMIT offset count]
		zrevrangebyscore key max min [WITHSCORES] [LIMIT offset count]
	# 取分值最低的2个成员
	zrangebyscore users 0 100 withscores limit 0 2
	# 取分值最高的2个成员
	zrevrangebyscore users 100 80 withscores limit 0 2

删除元素：
	zrem key member [member ...]
	zremrangebyrank key start stop
	zremrangebyscore key min max
	

	